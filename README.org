* Description
This setup uses the [[https://www.elastic.co/][Elastic Stack]] with some example applications, written in Java and Go to test the following aspects:
- Using different instrumentation methods from [[https://opentelemetry.io/][OpenTelemetry]]
- Using Elastic Stack for logging and collecting metrics and telemetry data
- Testing tracing with REST-Calls and asynchronous [[https://cloudevents.io/][CloudEvents]] on [[https://kafka.apache.org/][Apache Kafka]]

* Build
#+begin_src sh
  gradle build -p apps
  podman-compose build
#+end_src
* Start
1. To run the example, type:
#+begin_src sh
  podman-compose up -d
#+end_src

2. Verify, filebeat indices exists, running:
#+begin_src sh
  podman-compose exec elasticsearch curl localhost:9200/_cat/indices
#+end_src
Should return something like
#+begin_example
yellow open .ds-filebeat-8.11.1-2023.11.27-000001 H2R0iZ3hSaOLA8b5IcfvTQ 1 1 3714 0 383kb 383kb 383kb
yellow open .ds-metricbeat-8.11.1-2023.11.28-000001 XGlsKCI3QXqS6mYo-3zJrg 1 1 208 0   1.4mb   1.4mb   1.4mb
#+end_example
Logs and metrics should be visible in Kibana: http://localhost:5601/app/observability/overview


* Setup
** Elasticsearch
The setup is based on [[https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html][Install Elasticsearch with Docker]] and a simplified version of the [[https://github.com/elastic/elasticsearch/blob/8.11/docs/reference/setup/install/docker/docker-compose.yml][docker-compose]] example:
- No security
- No persistence
- Use only one single node

** Kibana
The setup is based on [[https://www.elastic.co/guide/en/kibana/current/docker.html][Install Kibana with Docker]] and a simplified version of the [[https://github.com/elastic/elasticsearch/blob/8.11/docs/reference/setup/install/docker/docker-compose.yml][docker-compose]] example:
- No security
- No persistence
- Setting of ~xpack.encryptedSavedObjects.encryptionKey~ to avoid loosing functionality, descibed in [[https://www.elastic.co/guide/en/kibana/current/xpack-security-secure-saved-objects.html][Secure saved objects]].
http://localhost:5601/

** Filebeat
The setup is based on [[https://www.elastic.co/guide/en/beats/filebeat/current/running-on-docker.html][Run Filebeat on Docker]] with the following adjustments:
- Not using a volume-mounted ~filebeat.yml~
- Since Filebeat [[https://www.elastic.co/guide/en/beats/filebeat/current/configuration-autodiscover.html][autodiscover]] does not support Podman, log files are shared, using volumes

** Metricbeat
The setup is based on [[https://www.elastic.co/guide/en/beats/metricbeat/current/running-on-docker.html][Run Metricbeat on Docker]] with the following adjustments:
- Not using a volume-mounted ~metricbeat.yml~
- Since Metricbeat [[https://www.elastic.co/guide/en/beats/metricbeat/current/configuration-autodiscover.html][autodiscover]] does not support Podman, metric sources are configured indiviually

* TODO Kafka
Based on https://github.com/bitnami/containers/blob/main/bitnami/kafka/docker-compose.yml

* AKHQ
[[https://akhq.io/][ALHQ]] is used to have an UI for inspecting and creating messages in Kafka. The configuration is based on [[https://akhq.io/docs/configuration/docker.html][official Documentation]], but without using an external file. 
http://localhost:8080

* App1 (Java SpringBoot + Logback)
A simple Spring-Boot application:
- Writes logs to shared volume, so that filebeat can access them
- Uses default [[https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.metrics.export.simple][simple exporter]] to populate [[https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html][Spring Boot Actuator]] default metrics over HTTP
- Application-Logs are sent to elastic by filebeat
** APIs
*** Success logging
#+begin_example sh
  curl localhost:8081/api-1
#+end_example

*** Logging unenxpected errors / stacktraces
#+begin_example sh
  curl localhost:8081/api-2
#+end_example

* App2 (Java SpringBoot + Logback + ECS Logging)
Like [[* App1][App1]], but
- Implements [[https://www.elastic.co/guide/en/ecs-logging/overview/current/intro.html][ECS Logging]] for logs, by using [[https://www.elastic.co/guide/en/ecs-logging/java/1.x/setup.html][ECS Java logging]]
This saves filebeat resources, since it must not transform the logs into JSON and offers better filtering options in Elasticsearch and Kibana.
** APIs
*** Success logging
#+begin_example sh
  curl localhost:8081/api-1
#+end_example

*** Logging unenxpected errors / stacktraces
#+begin_example sh
  curl localhost:8081/api-2
#+end_example

- Telemetry data as log are not sent into file

* App2 
Like App1, but uses for JSON-Formatting
https://www.elastic.co/guide/en/ecs-logging/overview/current/intro.html
https://www.elastic.co/guide/en/ecs-logging/java/1.x/setup.html
Creates additional JSON-Log, which has more Details for Elastic
