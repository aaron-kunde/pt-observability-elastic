* Description
This setup uses the [[https://www.elastic.co/][Elastic Stack]] with some example applications, written in Java and Go to test the following aspects:
- Using different instrumentation methods from [[https://opentelemetry.io/][OpenTelemetry]]
- Using Elastic Stack for logging and collecting metrics and telemetry data
- Testing tracing with REST-Calls and asynchronous [[https://cloudevents.io/][CloudEvents]] on [[https://kafka.apache.org/][Apache Kafka]]

* Build
#+begin_src sh
  gradle build -p apps
  podman-compose build
#+end_src

* Start
1. To run the example, type:
#+begin_src sh
  podman-compose up -d
#+end_src

2. Verify, indices exists, running:
#+begin_src sh
  podman-compose exec elasticsearch curl -uelastic:elastic localhost:9200/_cat/indices
#+end_src
Should return something like
#+begin_example
  yellow open .ds-metrics-apm.app.my_cool_service-default-2023.12.18-000001    GIk4rOWUSW-83Dux8P-9QA 1 1 1077 0 621.8kb 621.8kb 621.8kb
  green  open .internal.alerts-observability.logs.alerts-default-000001        XprZtj8URBOKYokJ8v4Zjw 1 0    0 0    249b    249b    249b
  yellow open .ds-filebeat-8.11.1-2023.12.18-000001                            5VmMauFFSrO192oG_CTEqg 1 1   52 0  59.7kb  59.7kb  59.7kb
  yellow open .ds-metrics-apm.transaction.1m-default-2023.12.18-000001         -5Zfd60ASwqyutDbsFbpTA 1 1   32 0 151.3kb 151.3kb 151.3kb
  green  open .internal.alerts-observability.uptime.alerts-default-000001      lMEZ9gBeSlm1-eZD9DDmuQ 1 0    0 0    249b    249b    249b
  green  open .internal.alerts-ml.anomaly-detection.alerts-default-000001      A3SZoEHTQbmMvu0yrsGQpA 1 0    0 0    249b    249b    249b
  yellow open .ds-metricbeat-8.11.1-2023.12.18-000001                          Qg4S8pyqRjm_n_9zFhMiLQ 1 1 4831 0   4.6mb   4.6mb   4.6mb
  green  open .internal.alerts-observability.slo.alerts-default-000001         aUhRYcySTVG4xvFgDYIxyQ 1 0    0 0    249b    249b    249b
  green  open .internal.alerts-observability.apm.alerts-default-000001         ybVpTm89Qvu-WkOggqxhZQ 1 0    0 0    249b    249b    249b
  green  open .internal.alerts-observability.metrics.alerts-default-000001     znDAc5kTT2eBhxev-SSb1g 1 0    0 0    249b    249b    249b
  green  open .kibana-observability-ai-assistant-conversations-000001          hOoMHEwRTzO9II4W2NSorw 1 0    0 0    249b    249b    249b
  yellow open .ds-traces-apm-default-2023.12.18-000001                         dO7NwXXjSjqDODOznEa78A 1 1  100 0 585.5kb 585.5kb 585.5kb
  yellow open .ds-metrics-apm.internal-default-2023.12.18-000001               9VmoxBqSTyyvAy_0Wa4yxA 1 1  442 0 389.1kb 389.1kb 389.1kb
  green  open .internal.alerts-observability.threshold.alerts-default-000001   53dnDJcgTFeUvwuAJywXag 1 0    0 0    249b    249b    249b
  green  open .kibana-observability-ai-assistant-kb-000001                     Ito5c5g7SWCC2tcaeG4C9A 1 0    0 0    249b    249b    249b
  yellow open .ds-metrics-apm.service_summary.1m-default-2023.12.18-000001     ShfRjk3oTIKNFZCR9nttyA 1 1   32 0  71.2kb  71.2kb  71.2kb
  green  open .internal.alerts-security.alerts-default-000001                  _bwsTDaURZG-gXeD_IUrag 1 0    0 0    249b    249b    249b
  yellow open .ds-metrics-apm.app.apm_server-default-2023.12.18-000001         0zg6IPGnSWmCGV44MrN-RA 1 1   52 0  86.6kb  86.6kb  86.6kb
  yellow open .ds-metrics-apm.service_transaction.1m-default-2023.12.18-000001 iujgNMNVTPGWA1FTD3gZfg 1 1   32 0  93.3kb  93.3kb  93.3kb
  green  open .internal.alerts-stack.alerts-default-000001                     lXiMpOJgTfKy5gUQGK9mlg 1 0    0 0    249b    249b    249b
#+end_example
Logs and metrics should be visible in Kibana: http://localhost:5601/app/observability/overview

* Setup
** Elasticsearch
The setup is based on [[https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html][Install Elasticsearch with Docker]] and a simplified version of the [[https://github.com/elastic/elasticsearch/blob/8.11/docs/reference/setup/install/docker/docker-compose.yml][docker-compose]] example:
- [[https://www.elastic.co/guide/en/elasticsearch/reference/8.2/security-minimal-setup.html][Minimal security]] to use [[* APM][APM]].
- No persistence
- Use only one single node

** Kibana
The setup is based on [[https://www.elastic.co/guide/en/kibana/current/docker.html][Install Kibana with Docker]] and a simplified version of the [[https://github.com/elastic/elasticsearch/blob/8.11/docs/reference/setup/install/docker/docker-compose.yml][docker-compose]] example:
- [[https://www.elastic.co/guide/en/elasticsearch/reference/8.2/security-minimal-setup.html][Minimal security]] to use [[* APM][APM]].
- No persistence
- Setting of ~xpack.encryptedSavedObjects.encryptionKey~ to avoid loosing functionality, descibed in [[https://www.elastic.co/guide/en/kibana/current/xpack-security-secure-saved-objects.html][Secure saved objects]].
- Setting of ~xpack.fleet.packages~ to enable [[* APM][APM]]-App on startup.
- Settings are set using [[https://www.elastic.co/guide/en/kibana/7.17/docker.html#environment-variable-config][environment variables]].
- Kibana can be access using the URL: http://localhost:5601/

** Filebeat
The setup is based on [[https://www.elastic.co/guide/en/beats/filebeat/current/running-on-docker.html][Run Filebeat on Docker]] with the following adjustments:
- Not using a volume-mounted ~filebeat.yml~
- Since Filebeat [[https://www.elastic.co/guide/en/beats/filebeat/current/configuration-autodiscover.html][autodiscover]] does not support Podman, log files are shared, using volumes

** Metricbeat
The setup is based on [[https://www.elastic.co/guide/en/beats/metricbeat/current/running-on-docker.html][Run Metricbeat on Docker]] with the following adjustments:
- Not using a volume-mounted ~metricbeat.yml~
- Since Metricbeat [[https://www.elastic.co/guide/en/beats/metricbeat/current/configuration-autodiscover.html][autodiscover]] does not support Podman, metric sources are configured indiviually
- Try to get metrics from App1, using [[https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-module-http.html][HTTP module]]. Data is accessible in Kibana in the Metrics Explorer by ~http.app1.names~
- Collect metrics from App2, using [[https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-module-prometheus.html][Prometheus module]].
- Added some tags for experimenting

** APM
The setup is based on [[https://www.elastic.co/guide/en/apm/guide/current/running-on-docker.html][Run APM Server on Docker]]. For APM functions properly, Elastic security must be enabled on a minimum scale.


* TODO Kafka
Based on https://github.com/bitnami/containers/blob/main/bitnami/kafka/docker-compose.yml

* AKHQ
[[https://akhq.io/][ALHQ]] is used to have an UI for inspecting and creating messages in Kafka. The configuration is based on [[https://akhq.io/docs/configuration/docker.html][official Documentation]], but without using an external file. 
http://localhost:8080

* App1 (Java SpringBoot + Logback)
A simple Spring-Boot application:
- Writes logs to shared volume, so that filebeat can access them
- Uses default [[https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.metrics.export.simple][simple exporter]] to populate [[https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html][Spring Boot Actuator]] default metrics over HTTP
- Application-Logs are sent to elastic by filebeat
** APIs
*** Success logging
#+begin_example sh
  curl localhost:8081/api-1
#+end_example

*** Logging unenxpected errors / stacktraces
#+begin_example sh
  curl localhost:8081/api-2
#+end_example

* App2 (Java SpringBoot + Logback + ECS Logging + Prometheus)
Like [[* App1][App1]], but
- Implements [[https://www.elastic.co/guide/en/ecs-logging/overview/current/intro.html][ECS Logging]] for logs, by using [[https://www.elastic.co/guide/en/ecs-logging/java/1.x/setup.html][ECS Java logging]]
- Logs are written in the default format to stdout like in App1
- Logs are written in JSON format to a file, if application runs in a container 
- Publish metrics using [[https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.metrics.export.prometheus][Prometheus-Exporter]]
This saves filebeat resources, since it must not transform the logs into JSON and offers better filtering options in Elasticsearch and Kibana.
** APIs
*** Success logging
#+begin_example sh
  curl localhost:8081/api-1
#+end_example

*** Logging unenxpected errors / stacktraces
#+begin_example sh
  curl localhost:8081/api-2
#+end_example
Calling this API will increase the metric ~prometheus.metrics.logback_events_total~

* App3 (Java SpringBoot + Logback + ECS Logging + OpenTelemtry)
Like [[* App2][App2]], but
- Publish metrics using [[https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.metrics.export.otlp][OpenTelemetry-Exporter]]
This saves filebeat resources, since it must not transform the logs into JSON and offers better filtering options in Elasticsearch and Kibana.
** APIs
*** Success logging
#+begin_example sh
  curl localhost:8081/api-1
#+end_example

*** Logging unenxpected errors / stacktraces
#+begin_example sh
  curl localhost:8081/api-2
#+end_example
To analyze otel behaviour, start the applcation with ~Ddebug~.

- Telemetry data as log are not sent into file

