* Description
This setup uses the [[https://www.elastic.co/][Elastic Stack]] with some example applications, written in Java and Go to test the following aspects:
- Using different instrumentation methods from [[https://opentelemetry.io/][OpenTelemetry]] and [[https://www.elastic.co/de/observability][Elastic Observability]] 
- Using Elastic Stack for logging and collecting metrics and telemetry data
- Testing tracing with REST-Calls and asynchronous [[https://cloudevents.io/][CloudEvents]] on [[https://kafka.apache.org/][Apache Kafka]]

* Build
#+begin_src sh
  gradle build -p apps
  podman-compose build
#+end_src

* Start
1. To run the example, type:
#+begin_src sh
  podman-compose up -d
#+end_src

2. Verify, indices exists, running:
#+begin_src sh
  podman-compose exec elasticsearch curl -uelastic:elastic localhost:9200/_cat/indices
#+end_src

Should return something like:
#+begin_example
  yellow open .ds-metrics-apm.app.my_cool_service-default-2023.12.18-000001    GIk4rOWUSW-83Dux8P-9QA 1 1 1077 0 621.8kb 621.8kb 621.8kb
  green  open .internal.alerts-observability.logs.alerts-default-000001        XprZtj8URBOKYokJ8v4Zjw 1 0    0 0    249b    249b    249b
  yellow open .ds-filebeat-8.11.1-2023.12.18-000001                            5VmMauFFSrO192oG_CTEqg 1 1   52 0  59.7kb  59.7kb  59.7kb
  yellow open .ds-metrics-apm.transaction.1m-default-2023.12.18-000001         -5Zfd60ASwqyutDbsFbpTA 1 1   32 0 151.3kb 151.3kb 151.3kb
  green  open .internal.alerts-observability.uptime.alerts-default-000001      lMEZ9gBeSlm1-eZD9DDmuQ 1 0    0 0    249b    249b    249b
  green  open .internal.alerts-ml.anomaly-detection.alerts-default-000001      A3SZoEHTQbmMvu0yrsGQpA 1 0    0 0    249b    249b    249b
  yellow open .ds-metricbeat-8.11.1-2023.12.18-000001                          Qg4S8pyqRjm_n_9zFhMiLQ 1 1 4831 0   4.6mb   4.6mb   4.6mb
  green  open .internal.alerts-observability.slo.alerts-default-000001         aUhRYcySTVG4xvFgDYIxyQ 1 0    0 0    249b    249b    249b
  green  open .internal.alerts-observability.apm.alerts-default-000001         ybVpTm89Qvu-WkOggqxhZQ 1 0    0 0    249b    249b    249b
  green  open .internal.alerts-observability.metrics.alerts-default-000001     znDAc5kTT2eBhxev-SSb1g 1 0    0 0    249b    249b    249b
  green  open .kibana-observability-ai-assistant-conversations-000001          hOoMHEwRTzO9II4W2NSorw 1 0    0 0    249b    249b    249b
  yellow open .ds-traces-apm-default-2023.12.18-000001                         dO7NwXXjSjqDODOznEa78A 1 1  100 0 585.5kb 585.5kb 585.5kb
  yellow open .ds-metrics-apm.internal-default-2023.12.18-000001               9VmoxBqSTyyvAy_0Wa4yxA 1 1  442 0 389.1kb 389.1kb 389.1kb
  green  open .internal.alerts-observability.threshold.alerts-default-000001   53dnDJcgTFeUvwuAJywXag 1 0    0 0    249b    249b    249b
  green  open .kibana-observability-ai-assistant-kb-000001                     Ito5c5g7SWCC2tcaeG4C9A 1 0    0 0    249b    249b    249b
  yellow open .ds-metrics-apm.service_summary.1m-default-2023.12.18-000001     ShfRjk3oTIKNFZCR9nttyA 1 1   32 0  71.2kb  71.2kb  71.2kb
  green  open .internal.alerts-security.alerts-default-000001                  _bwsTDaURZG-gXeD_IUrag 1 0    0 0    249b    249b    249b
  yellow open .ds-metrics-apm.app.apm_server-default-2023.12.18-000001         0zg6IPGnSWmCGV44MrN-RA 1 1   52 0  86.6kb  86.6kb  86.6kb
  yellow open .ds-metrics-apm.service_transaction.1m-default-2023.12.18-000001 iujgNMNVTPGWA1FTD3gZfg 1 1   32 0  93.3kb  93.3kb  93.3kb
  green  open .internal.alerts-stack.alerts-default-000001                     lXiMpOJgTfKy5gUQGK9mlg 1 0    0 0    249b    249b    249b
#+end_example

Logs and metrics should be visible in Kibana: http://localhost:5601/app/observability/overview

* Setup
** Elasticsearch
The setup is based on [[https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html][Install Elasticsearch with Docker]] and is a simplified version of the [[https://github.com/elastic/elasticsearch/blob/8.11/docs/reference/setup/install/docker/docker-compose.yml][docker-compose]] example:
- [[https://www.elastic.co/guide/en/elasticsearch/reference/8.11/security-minimal-setup.html][Minimal security]] to use [[* APM][APM]]
- No persistence
- Use only one single node

** Kibana
The setup is based on [[https://www.elastic.co/guide/en/kibana/current/docker.html][Install Kibana with Docker]] and a simplified version of the [[https://github.com/elastic/elasticsearch/blob/8.11/docs/reference/setup/install/docker/docker-compose.yml][docker-compose]] example:
- [[https://www.elastic.co/guide/en/elasticsearch/reference/8.11/security-minimal-setup.html][Minimal security]] to use [[* APM][APM]]
- No persistence
- Setting of ~xpack.encryptedSavedObjects.encryptionKey~ to avoid loosing functionality, described in [[https://www.elastic.co/guide/en/kibana/current/xpack-security-secure-saved-objects.html][Secure saved objects]].
- Setting of ~xpack.fleet.packages~ to enable [[* APM][APM]]-App on startup.
- Settings are set using [[https://www.elastic.co/guide/en/kibana/7.17/docker.html#environment-variable-config][environment variables]].
- Kibana can be access using the URL: http://localhost:5601/

** Filebeat
The setup is based on [[https://www.elastic.co/guide/en/beats/filebeat/current/running-on-docker.html][Run Filebeat on Docker]] with the following adjustments:
- Not using a volume-mounted ~filebeat.yml~
- Since Filebeat [[https://www.elastic.co/guide/en/beats/filebeat/current/configuration-autodiscover.html][Autodiscover]] does not support Podman, log files are shared, using volumes

** Metricbeat
The setup is based on [[https://www.elastic.co/guide/en/beats/metricbeat/current/running-on-docker.html][Run Metricbeat on Docker]] with the following adjustments:
- Not using a volume-mounted ~metricbeat.yml~
- Since Metricbeat [[https://www.elastic.co/guide/en/beats/metricbeat/current/configuration-autodiscover.html][Autodiscover]] does not support Podman, metric sources are configured individually
- Try to get metrics from App1, using [[https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-module-http.html][HTTP module]]. Data is accessible in Kibana in the Metrics Explorer by ~http.app1.names~
- Collect metrics from App2, using [[https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-module-prometheus.html][Prometheus module]].
- Added some tags and fields for experimenting. These costs more resources!

** APM
The setup is based on [[https://www.elastic.co/guide/en/apm/guide/current/running-on-docker.html][Run APM Server on Docker]] with the following adjustments:
- Not using a volume-mounted ~apm-server.yml~
- For APM functions properly, Elastic security must be enabled on a minimum scale.

** Kafka
Based on [[https://github.com/bitnami/containers/blob/main/bitnami/kafka/3.5/debian-11/docker-compose.yml][Bitnami Containers]] with some adjustments:
- No persistence
- Added an additional external listener to get local development and AKHQ running (see: https://github.com/tchiotludo/akhq/issues/1085). This means:
  - Kafka is external accessible using ~localhost:9092~
  - and internal accessible using ~kafka:9094~

** AKHQ
[[https://akhq.io/][AKHQ]] is used to have an UI for inspecting and creating messages in Kafka. The configuration is based on [[https://akhq.io/docs/configuration/docker.html][official Documentation]], but without using an external file. 
[[http://localhost:9080]]

** MySQL
[[https://www.mysql.com][MySQL]] is used as an example database for persistence.

** PostgreSQL
[[https://www.postgresql.org][PostgreSQL]] is used as another example database for persistence.

** Example Applications
The following applications describe different setups and scenarios:
|      | Implementation  | Logging | Logging-Format | Metrics                           | Observability       |
|------+-----------------+---------+----------------+-----------------------------------+---------------------|
| App1 | Java Spring Boot | Logback | raw            | Spring Actuator JSON              | APM Agent           |
| App2 | Java Spring Boot | Logback | ECS Logging    | Spring Actuator JSON + Prometheus | APM Agent           |
| App3 | Java Spring Boot | Logback | ECS Logging    | Spring Actuator JSON              | OpenTelemetry Agent |
Each application is deployed as a variant either connected to a MySQL or PostgreSQL database.

*** App1
A simple Spring-Boot application:
- Writes logs to shared volume, so that filebeat can access them
- Uses default [[https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.metrics.export.simple][simple exporter]] to populate [[https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html][Spring Boot Actuator]] default metrics over HTTP
- Application-Logs are sent to elastic by filebeat
- Instrumented, using the [[https://www.elastic.co/guide/en/apm/agent/java/1.x/intro.html][APM Java Agent]]
- Has custom metrics, which count the API-calls
- Writes messages to Kafka topic ~topic1~
- Reads messages from Kafka topics ~topic2~ and ~topic3~

**** APIs
***** Success
The following call writes a message to Kafka topic ~topic1~:
#+begin_src sh
  curl localhost:8081/api-1
#+end_src

***** Throwing unexpected errors / Stacktrace
#+begin_example sh
  curl localhost:8081/api-2
#+end_example

**** Metrics
Metrics are only available at the actuator endpoint, e.g. for the ~api1Counter~:
#+begin_src sh
   curl localhost:8181/actuator/metrics/app1m.api-1.counter
#+end_src

The output will be something like:
#+begin_example
{"name":"app1m.api-1.counter","measurements":[{"statistic":"COUNT","value":0.0}],"availableTags":[{"tag":"it-1","values":["it-2"]}]}
#+end_example
Since these metrics are not presented all at once, they can't be collected with Metricbeat and analysed in Kibana out of the box, using the ~metricbeat-*~ stream. They are accessible by APM.

**** Traces
Setting the the [[https://www.w3.org/TR/trace-context/][W3C Trace Context]]:
#+begin_src sh
  curl -H 'traceparent: 00-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-bbbbbbbbbbbbbbbb-01'  localhost:8081/api-1
#+end_src

In Kibana ~trace.id~ and ~trace.parent~ can be verified under [[http://localhost:5601/app/apm/services/app1/transactions/view?rangeFrom=now-15m&rangeTo=now&transactionName=AppRestController%23api1&transactionType=request&comparisonEnabled=true&offset=1d&score=0&timestamp=2023-12-22T13:21:01.231Z&transactionId=694c633dcd107af3&traceId=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&detailTab=metadata][Observability -> APM -> Services -> app1 -> Transactions -> AppRestController#app1]]:
#+begin_example
  ...
  http
  http.request.headers.Traceparent 00-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-bbbbbbbbbbbbbbbb-01
  ...
  parent
  parent.id bbbbbbbbbbbbbbbb
  ...
  span
  span.id 694c633dcd107af3
  ...
  trace
  trace.id aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
  ...
#+end_example

Traces and spans are even possible with Kafka topcis on the consumer site, because these header are also set in Kafka headers: ~traceparent~, ~elasticapmtraceparent~ and ~tracestate~.

**** Logs
Logs have no ~trace.id~ and are not seen and correllated under APM. But not in all logs. This depends on the library, which is logging.

*** App2
Like App1, but
- Implements [[https://www.elastic.co/guide/en/ecs-logging/overview/current/intro.html][ECS Logging]] for logs, by using [[https://www.elastic.co/guide/en/ecs-logging/java/1.x/setup.html][ECS Java logging]]
- Logs are written in the default format to stdout like in App1
- Logs are written in JSON format to a file, if application runs in a container. This saves filebeat resources, since it must not transform the logs into JSON and offers better filtering options in Elasticsearch and Kibana.
- Publish metrics using also [[https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.metrics.export.prometheus][Prometheus-Exporter]]. These metrics can be analysed in Kibana.
- Instrumented, using the [[https://www.elastic.co/guide/en/apm/agent/java/1.x/intro.html][APM Java Agent]]
- Writes messages to Kafka topic ~topic2~
- Reads messages from Kafka topic ~topic1~ and ~topic3~

**** APIs
***** Success
The following call writes a message to Kafka topic ~topic2~:
#+begin_example sh
  curl localhost:8082/api-1
#+end_example

***** Throwing unexpected errors / Stacktrace
#+begin_example sh
  curl localhost:8082/api-2
#+end_example
Calling this API will increase the metric ~prometheus.metrics.logback_events_total~

**** Metrics
Metrics are also available at the actuator Prometheus endpoint, e.g. for the ~api1Counter~:
#+begin_src sh
  curl -s localhost:8182/actuator/prometheus | grep -e api_1
#+end_src

The output will be something like
#+begin_example
# HELP api_1_counter_total
# TYPE api_1_counter_total counter
app2m_api_1_counter_total{it_1="it-2",} 0.0
#+end_example
Since these metrics are presented all at once, they can be collected with Metricbeat and analysed in Kibana, using the ~metricbeat-*~ stream. They are also accessible by APM.


**** Traces
Traces are handled like in App1.

**** Logs
Logs are structured and can be seen under APM. They have a ~trace.id~ and can be correllated under APM.

*** App3
Like App2, but
- Publish metrics using [[https://opentelemetry.io/docs/instrumentation/java/automatic/][Automatic Instrumentation]] with an [[https://www.elastic.co/guide/en/apm/guide/current/open-telemetry-direct.html#instrument-apps-otel][OpenTelemetry Agent]] instead of an APM Java Agent or exporting the metrics with an [[https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.metrics.export.otlp][OpenTelemetry-Exporter]]. 
- Not using Prometheus
- Using deployment pattern [[https://opentelemetry.io/docs/collector/deployment/no-collector/][No Collector]] to ship metrics directly to APM
- Writes messages to Kafka topic ~topic3~
- Reads messages from Kafka topic ~topic1~ and ~topic2~
  
**** APIs
***** Success
The following call writes a message to Kafka topic ~topic3~:
#+begin_example sh
  curl localhost:8083/api-1
#+end_example

***** Throwing unexpected errors / Stacktrace
#+begin_example sh
  curl localhost:8083/api-2
#+end_example
To analyse otel behaviour, start the application with ~Ddebug~.

**** Metrics
Metrics are partially handled like in App1, but not transferred to Elasticsearch and even not visible in APM.

**** Traces
Traces have less information as in App1 or App2 (e.g. only ~http.request.method~ and ~http.response.status_code~, but contain also ~parent.id~ and ~trace.id~. Only ~traceparent~ header is set in Kafka headers.

**** Logs
Logs are structured and can be seen under APM, like in App2. They have no ~trace.id~ but a ~trac_id~ and cannot be correllated under APM through /Discover/. But not in all logs. This depends on the library, which is logging.
