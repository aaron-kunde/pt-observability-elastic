services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_VERSION}-amd64
    environment:
      discovery.type: single-node
      xpack.security.enabled: true
      ELASTIC_PASSWORD: elastic

  elasticsearch-init:
    image: docker.io/curlimages/curl:8.4.0
    environment:
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: elastic
      KIBANA_USERNAME: kibana_system
      KIBANA_PASSWORD: kibana_system
    healthcheck:
      test: ["CMD", "curl", "-f", "-s", "-u kibana_system:kibana_system", "elasticsearch:9200"]
      interval: 1s
      timeout: 5s
      retries: 120
    command: |
      sh
      -c '
      echo "Setting kibana_system password";
      until curl -v -X POST -u "elastic:elastic" -H "Content-Type: application/json" http://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"kibana_system\"}" | grep -q "^{}";
      do sleep 10;
      done;
      echo "All done!"
      '

  kibana:
    image: docker.elastic.co/kibana/kibana:${ES_VERSION}-amd64
    ports:
      - 5601:5601
    environment:
      XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: min-32-byte-long-NEW-encryption-key
      ELASTICSEARCH_USERNAME: kibana_system
      ELASTICSEARCH_PASSWORD: kibana_system
      XPACK_FLEET_PACKAGES: '[{"name":"apm","version":"latest"}]'

  filebeat:
    image: docker.elastic.co/beats/filebeat:${ES_VERSION}-amd64
    volumes:
      - app_logs:/var/log/app_logs
    environment:
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: elastic
    command: |
      filebeat
      -e
      -E filebeat.inputs.0.id=plain_logs
      -E filebeat.inputs.0.type=filestream
      -E filebeat.inputs.0.enabled=true
      -E filebeat.inputs.0.paths=/var/log/app_logs/app1*.log
      -E filebeat.inputs.1.id=json_logs
      -E filebeat.inputs.1.type=filestream
      -E filebeat.inputs.1.paths=/var/log/app_logs/app*.log.json
      -E filebeat.inputs.1.parsers.0.ndjson.overwrite_keys=true
      -E filebeat.inputs.1.parsers.0.ndjson.add_error_key=true
      -E filebeat.inputs.1.parsers.0.ndjson.expand_keys=true

  metricbeat:
    image: docker.elastic.co/beats/metricbeat:${ES_VERSION}-amd64
    environment:
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: elastic
    command: |
      metricbeat
      -e
      -E metricbeat.modules.0.module=http
      -E metricbeat.modules.0.namespace=ns-ns-http
      -E metricbeat.modules.0.hosts='[app1m:8081, app1p:8081, app3m:8083, app3p:8083]'
      -E metricbeat.modules.0.path=/actuator/metrics
      -E metricbeat.modules.0.metricsets=[json]
      -E metricbeat.modules.0.tags='[t-app1, t-tag1, t-app3]'
      -E metricbeat.modules.0.fields='{project: "f-p1", app: ["f-app1", "f-app3"]}'
      -E metricbeat.modules.1.module=prometheus
      -E metricbeat.modules.1.hosts='[app2m:8082, app2p:8082]'
      -E metricbeat.modules.1.metrics_path=/actuator/prometheus
      -E metricbeat.modules.1.metricsets=[collector]
      -E metricbeat.modules.1.tags='[t-app2, t-tag2]'
      -E metricbeat.modules.1.fields='{project: "f-p1", app: "f-app2"}'

  apm-server:
    image: docker.elastic.co/apm/apm-server:${ES_VERSION}-amd64
    command: |
      apm-server
      -e
      -E apm-server.host=apm-server:8200
      -E output.elasticsearch.username=elastic
      -E output.elasticsearch.password=elastic

  kafka:
    image: docker.io/bitnami/kafka:3.5.1-debian-11-r74
    ports:
      - 9092:9092
    environment:
      # KRaft settings
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      # Listeners
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9094,CONTROLLER://:9093,EXTERNAL://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://:9094,EXTERNAL://localhost:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT

  akhq:
    image: docker.io/tchiotludo/akhq:0.24.0
    ports:
      - 9080:8080
    environment:
      AKHQ_CONFIGURATION: "akhq.connections.local.properties.bootstrap.servers: kafka:9094"

  # Not reachable under localhost, but the IP of the WSL. e.g.  172.30.248.120 (ifconfig)
  postgres:
    image: docker.io/library/postgres:16.1
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./postgres-init.d:/docker-entrypoint-initdb.d

  mysql:
    image: docker.io/mysql:8.2.0
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - ./mysql-init.d:/docker-entrypoint-initdb.d

  app1m:
    image: app1:latest
    ports:
      - 8181:8081
    build:
      context: ./apps/app1
      args:
        APP_NAME: app1
    volumes:
      - app_logs:/var/log/app_logs
    environment:
      SPRING_APPLICATION_NAME: app1m
      LOGGING_FILE_NAME: /var/log/app_logs/app1m.log
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9094
      JAVA_TOOL_OPTIONS: >
        --enable-preview
        -javaagent:/opt/app/elastic-apm-agent.jar
        -Delastic.apm.service_name=app1m
        -Delastic.apm.application_packages=pt.obs
        -Delastic.apm.server_url=http://apm-server:8200
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/app1
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_DATASOURCE_DRIVERCLASSNAME: com.mysql.cj.jdbc.Driver
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQL8Dialect
      REST_OUT_URL: http://app2m:8082/api-3

  app1p:
    image: app1:latest
    ports:
      - 8281:8081
    build:
      context: ./apps/app1
      args:
        APP_NAME: app1
    volumes:
      - app_logs:/var/log/app_logs
    environment:
      SPRING_APPLICATION_NAME: app1p
      LOGGING_FILE_NAME: /var/log/app_logs/app1p.log
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9094
      JAVA_TOOL_OPTIONS: >
        --enable-preview
        -javaagent:/opt/app/elastic-apm-agent.jar
        -Delastic.apm.service_name=app1p
        -Delastic.apm.application_packages=pt.obs
        -Delastic.apm.server_url=http://apm-server:8200
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/app1
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      REST_OUT_URL: http://app2p:8082/api-3

  app2m:
    image: app2:latest
    ports:
      - 8182:8082
    build:
      context: ./apps/app2
      args:
        APP_NAME: app2
    volumes:
      - app_logs:/var/log/app_logs
    environment:
      SPRING_APPLICATION_NAME: app2m
      LOGGING_FILE_NAME: /var/log/app_logs/app2m.log
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9094
      JAVA_TOOL_OPTIONS: >
        --enable-preview
        -javaagent:/opt/app/elastic-apm-agent.jar
        -Delastic.apm.service_name=app2m
        -Delastic.apm.application_packages=pt.obs
        -Delastic.apm.server_url=http://apm-server:8200
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/app2
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_DATASOURCE_DRIVERCLASSNAME: com.mysql.cj.jdbc.Driver
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQL8Dialect
      REST_OUT_URL: http://app3m:8083/api-3

  app2p:
    image: app2:latest
    ports:
      - 8282:8082
    build:
      context: ./apps/app2
      args:
        APP_NAME: app2
    volumes:
      - app_logs:/var/log/app_logs
    environment:
      SPRING_APPLICATION_NAME: app2p
      LOGGING_FILE_NAME: /var/log/app_logs/app2p.log
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9094
      JAVA_TOOL_OPTIONS: >
        --enable-preview
        -javaagent:/opt/app/elastic-apm-agent.jar
        -Delastic.apm.service_name=app2p
        -Delastic.apm.application_packages=pt.obs
        -Delastic.apm.server_url=http://apm-server:8200
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/app2
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      REST_OUT_URL: http://app3p:8083/api-3

  app3m:
    image: app3:latest
    ports:
      - 8183:8083
    build:
      context: ./apps/app3
      args:
        APP_NAME: app3
    volumes:
      - app_logs:/var/log/app_logs
    environment:
      SPRING_APPLICATION_NAME: app3m
      LOGGING_FILE_NAME: /var/log/app_logs/app3m.log
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9094
      JAVA_TOOL_OPTIONS: --enable-preview -javaagent:/opt/app/opentelemetry-javaagent.jar
      OTEL_SERVICE_NAME: app3m
      OTEL_EXPORTER_OTLP_ENDPOINT: http://apm-server:8200
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/app3
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_DATASOURCE_DRIVERCLASSNAME: com.mysql.cj.jdbc.Driver
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQL8Dialect
      REST_OUT_URL: http://app1m:8081/api-3

  app3p:
    image: app3:latest
    ports:
      - 8283:8083
    build:
      context: ./apps/app3
      args:
        APP_NAME: app3
    volumes:
      - app_logs:/var/log/app_logs
    environment:
      SPRING_APPLICATION_NAME: app3p
      LOGGING_FILE_NAME: /var/log/app_logs/app3p.log
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9094
      JAVA_TOOL_OPTIONS: --enable-preview -javaagent:/opt/app/opentelemetry-javaagent.jar
      OTEL_SERVICE_NAME: app3p
      OTEL_EXPORTER_OTLP_ENDPOINT: http://apm-server:8200
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/app3
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      REST_OUT_URL: http://app1p:8081/api-3

volumes:
  app_logs:
