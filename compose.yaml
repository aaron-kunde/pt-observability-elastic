services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_VERSION}-amd64
    environment:
      discovery.type: single-node
      xpack.security.enabled: true
      ELASTIC_PASSWORD: elastic

  elasticsearch-init:
    image: docker.io/curlimages/curl:8.4.0
    environment:
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: elastic
      KIBANA_USERNAME: kibana_system
      KIBANA_PASSWORD: kibana_system
    healthcheck:
      test: ["CMD", "curl", "-f", "-s", "-u kibana_system:kibana_system", "elasticsearch:9200"]
      interval: 1s
      timeout: 5s
      retries: 120
    command: |
      sh
      -c '
      echo "Setting kibana_system password";
      until curl -v -X POST -u "elastic:elastic" -H "Content-Type: application/json" http://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"kibana_system\"}" | grep -q "^{}";
      do sleep 10;
      done;
      echo "All done!"
      '

  kibana:
    image: docker.elastic.co/kibana/kibana:${ES_VERSION}-amd64
    ports:
      - 5601:5601
    environment:
      XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: min-32-byte-long-NEW-encryption-key
      ELASTICSEARCH_USERNAME: kibana_system
      ELASTICSEARCH_PASSWORD: kibana_system
      XPACK_FLEET_PACKAGES: '[{"name":"apm","version":"latest"}]'

  filebeat:
    image: docker.elastic.co/beats/filebeat:${ES_VERSION}-amd64
    volumes:
      - app_logs:/var/log/app_logs
    environment:
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: elastic
    command: |
      filebeat
      -e
      -E filebeat.inputs.0.id=plain_logs
      -E filebeat.inputs.0.type=filestream
      -E filebeat.inputs.0.enabled=true
      -E filebeat.inputs.0.paths=/var/log/app_logs/app1.log
      -E filebeat.inputs.1.id=json_logs
      -E filebeat.inputs.1.type=filestream
      -E filebeat.inputs.1.paths=/var/log/app_logs/app2.log.json
      -E filebeat.inputs.1.parsers.0.ndjson.overwrite_keys=true
      -E filebeat.inputs.1.parsers.0.ndjson.add_error_key=true
      -E filebeat.inputs.1.parsers.0.ndjson.expand_keys=true

  metricbeat:
    image: docker.elastic.co/beats/metricbeat:${ES_VERSION}-amd64
    environment:
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: elastic
    command: |
      metricbeat
      -e
      -E metricbeat.modules.0.module=http
      -E metricbeat.modules.0.namespace=ns-app1
      -E metricbeat.modules.0.hosts=[app1:8080]
      -E metricbeat.modules.0.path=/actuator/metrics
      -E metricbeat.modules.0.metricsets=[json]
      -E metricbeat.modules.0.tags='[t-app1, t-tag1]'
      -E metricbeat.modules.0.fields='{project: "f-p1", app: "f-app1"}'
      -E metricbeat.modules.1.module=prometheus
      -E metricbeat.modules.1.hosts=[app2:8080]
      -E metricbeat.modules.1.metrics_path=/actuator/prometheus
      -E metricbeat.modules.1.metricsets=[collector]
      -E metricbeat.modules.1.tags='[t-app2, t-tag2]'
      -E metricbeat.modules.1.fields='{project: "f-p1", app: "f-app2"}'

  apm-server:
    image: docker.elastic.co/apm/apm-server:${ES_VERSION}-amd64
    command: |
      apm-server
      -e
      -E apm-server.host=apm-server:8200
      -E output.elasticsearch.username=elastic
      -E output.elasticsearch.password=elastic

  kafka:
    image: docker.io/bitnami/kafka:3.5.1-debian-11-r74
    volumes:
      - kafka_data:/bitnami
    environment:
      # KRaft settings
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      # Listeners
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT

  akhq:
    image: docker.io/tchiotludo/akhq:0.24.0
    ports:
      - 8080:8080
    environment:
      AKHQ_CONFIGURATION: "akhq.connections.local.properties.bootstrap.servers: kafka:9092"

  app1:
    image: app1:latest
    ports:
      - 8081:8080
    build:
      context: ./apps/app1
      args:
        APP_NAME: app1
    volumes:
      - app_logs:/var/log/app_logs
    environment:
      SPRING_APPLICATION_NAME: app1
      LOGGING_FILE_NAME: /var/log/app_logs/app1.log
      JAVA_OPTS: -javaagent:/opt/app/elastic-apm-agent.jar -Delastic.apm.service_name=app1 -Delastic.apm.application_packages=pt.obs -Delastic.apm.server_url=http://apm-server:8200

  app2:
    image: app2:latest
    ports:
      - 8082:8080
    build:
      context: ./apps/app2
      args:
        APP_NAME: app2
    volumes:
      - app_logs:/var/log/app_logs
    environment:
      SPRING_APPLICATION_NAME: app2
      LOGGING_FILE_NAME: /var/log/app_logs/app2.log
      JAVA_OPTS: -javaagent:/opt/app/elastic-apm-agent.jar -Delastic.apm.service_name=app2 -Delastic.apm.application_packages=pt.obs -Delastic.apm.server_url=http://apm-server:8200

  app3:
    image: app3:latest
    ports:
      - 8083:8080
    build:
      context: ./apps/app3
      args:
        APP_NAME: app3
    volumes:
      - app_logs:/var/log/app_logs
    environment:
      SPRING_APPLICATION_NAME: app3
      LOGGING_FILE_NAME: /var/log/app_logs/app3.log

volumes:
  kafka_data:
    driver: local
  app_logs:
